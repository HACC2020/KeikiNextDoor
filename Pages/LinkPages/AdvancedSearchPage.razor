@page "/links/advanced-search"

@inject NavigationManager NavigationManager
@inject IconHelper Icon

<h1 class="text-4xl font-bold tracking-wide text-black">Links Advanced Search</h1>

<hr class="mt-1 mb-2 border-green-900">

<div class="flex flex-col mx-2">
    <div class="flex-grow flex flex-col">
        <p class="text-sm">Name</p>

        <input type="text" class="w-full p-2 border-solid border-green-400 rounded-md" @bind="@Name" />
    </div>

    <div class="flex-grow flex flex-col">
        <p class="text-sm">Origin</p>

        <input type="text" class="w-full p-2 border-solid border-green-400 rounded-md" @bind="@Origin" />
    </div>

    <div class="flex-grow flex flex-col">
        <p class="text-sm">Link Type</p>

        <div class="flex flex-row">
            <select class="px-2 py-1 border-solid border-green-400 rounded-md">
                <option value="null" selected="@(LinkType == null)" @onclick="@(() => LinkType = null)">None</option>
                @foreach (var linkType in Enum.GetValues<LinkType>()) {
                    <option value="@linkType" selected="@(LinkType == (LinkType)linkType)" @onclick="@(() => LinkType = linkType)">@linkType.ToString()</option>
                }
            </select>
        </div>
    </div>

    <div class="flex flex-row items-center justify-end">
        <button type="button" class="px-2 py-1 bg-gray-400 rounded-md" @onclick="@Search">
            Cancel
        </button>

        <button type="button" class="ml-2 px-2 py-1 bg-green-500 rounded-md" @onclick="@Search">
            @SearchIcon
        </button>
    </div>
</div>


@code {
    private MarkupString SearchIcon = new MarkupString();

    private string Name = "";
    private string Origin = "";
    private LinkType? LinkType = null;

    private string Query = null;

    private void Search() {
        List<string> parameters = new List<string>();
        if (!String.IsNullOrWhiteSpace(Name)) parameters.Add($"Name={Name}");
        if (!String.IsNullOrWhiteSpace(Origin)) parameters.Add($"Origin={Origin}");
        if (LinkType != null) parameters.Add($"LinkType={LinkType.ToString()}");
        string query = String.Join('&', parameters.ToArray());
        if (!String.IsNullOrWhiteSpace(query)) query = "?" + query;
        NavigationManager.NavigateTo($"/links/search{query}");
    }

    protected override void OnInitialized() {
        var query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(query).TryGetValue("Name", out var name)) Name = name;
        if (QueryHelpers.ParseQuery(query).TryGetValue("Origin", out var origin)) Origin = origin;
        if (QueryHelpers.ParseQuery(query).TryGetValue("LinkType", out var linkType)) {
            bool success = Enum.TryParse<LinkType>(linkType, out var type);
            if (success) LinkType = type;
            else LinkType = null;
        }
    }
}