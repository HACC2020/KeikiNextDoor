@page "/links/advancedsearch"

@inject NavigationManager NavigationManager
@inject IconHelper Icon

<h1 class="mx-2 text-4xl font-bold tracking-wide text-black">Links Advanced Search</h1>

<hr class="mx-2 mt-1 mb-2 border-green-900">

<div class="flex flex-col mx-2">
    <div class="flex-grow flex flex-col">
        <p class="text-md">Name</p>

        <input type="text" class="w-full px-4 py-2 border-solid border-green-400 rounded-md" @bind="@Name" placeholder="Bus Transit Routes" />
    </div>

    <div class="flex-grow flex flex-col mt-2">
        <p class="text-md">Origin</p>

        <input type="text" class="w-full px-4 py-2 border-solid border-green-400 rounded-md" @bind="@Origin" placeholder="Department of Transportation" />
    </div>

    <div class="flex-grow flex flex-col mt-2">
        <p class="text-md">Link Type</p>

        <div class="flex flex-row mt-1">
            <button type="button" @onclick="@(() => SelectLinkType(null))" class="px-2 py-1 bg-green-500 rounded-md text-gray-200 @((LinkType == null) ? LinkTypeSelectedCSS : null)">
                No Link Type
            </button>
            @foreach (var linkType in Enum.GetValues<LinkType>()) {
                <button type="button" @onclick="@(() => SelectLinkType(linkType))" class="ml-2 px-2 py-1 bg-green-500 rounded-md text-gray-200 @((LinkType == linkType) ? LinkTypeSelectedCSS : null)">
                    @linkType.ToString()
                </button>
            }
        </div>
    </div>

    <div class="flex flex-row items-center justify-end mt-2">
        <button type="button" class="flex flex-row px-2 py-1 bg-gray-300 rounded-md" @onclick="@Search">
            @CancelIcon
            <p>Cancel</p>
        </button>

        <button type="button" class="flex flex-row ml-2 px-2 py-1 bg-green-600 rounded-md" @onclick="@Search">
            @SearchIcon
            <p>Search</p>
        </button>
    </div>
</div>


@code {
    private MarkupString SearchIcon = new MarkupString();
    private MarkupString CancelIcon = new MarkupString();

    private const string LinkTypeSelectedCSS = "bg-blue-400";

    private string Name = "";
    private string Origin = "";
    private LinkType? LinkType = null;

    private void SelectLinkType(LinkType? linkType) {
        LinkType = linkType;
    }

    private void Search() {
        var query = GetQueryString();
        NavigationManager.NavigateTo($"/links/search{query}");
        StateHasChanged();
    }

    private string GetQueryString() {
        List<string> parameters = new List<string>();
        if (!String.IsNullOrWhiteSpace(Name)) parameters.Add($"name={Name}");
        if (!String.IsNullOrWhiteSpace(Origin)) parameters.Add($"origin={Origin}");
        if (LinkType != null) parameters.Add($"linktype={LinkType.ToString()}");
        string query = String.Join('&', parameters.ToArray());
        if (!String.IsNullOrWhiteSpace(query)) query = "?" + query;
        return query;
    }

    protected async override Task OnInitializedAsync() {
        SearchIcon = await Icon.GetIconAsync("Search", "w-6 h-6 fill-current text-green-100");
        CancelIcon = await Icon.GetIconAsync("X", "w-6 h-6 fill-current text-green-800");

        var query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(query).TryGetValue("name", out var name)) Name = name;
        if (QueryHelpers.ParseQuery(query).TryGetValue("origin", out var origin)) Origin = origin;
        if (QueryHelpers.ParseQuery(query).TryGetValue("linktype", out var linkType)) Enum.TryParse<LinkType>(linkType, out var LinkType);
    }
}