events {}
http {
    server {
        #HTTP - Standard communication port
        listen 80;
        #listen [::]:80;

        #Name of Server (FQDN) Canonical specified as with and without prefix
        server_name ohanasupport.com www.ohanasupport.com;

        #Redirect to https
        #return 301 https://$host$request_uri;

        #Definition of blazor application as proxy passthrough to blazor localhost
        location / {
            #Root web directory
            root ~/OhanaSupport/;
            #index _Host.cshtml


            proxy_pass http://127.0.0.1:5000;
            #Request proxying settings to pass through
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;

        }
    }
}

#Primary server - configuration
#server {
    #HTTPS - SSL - Standard communication port
    #listen 443 ssl;
    #listen [::]:443 ssl;

    #Name of Server (FQDN) Canonical specified as with and without prefix
    #server_name ohanasupport.com www.ohanasupport.com;
    
    #SSL encryption data including location of certificates for encryption/decryption
    #SSL certificate for ssl encryption
    #ssl_certificate                 /certificates/double.cert;
    #SSL key for SSL decryption
    #ssl_certificate_key             /certificates/double.key;
    #Diffie Helman key for further high security encryption
    #ssl_dhparam                     /certificates/dh4096.pem;
    #Use server ciphers for better security of clients
    #ssl_prefer_server_ciphers       on;
    #New high security server cipher
    #ssl_ciphers                     'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
    #Protocols for SSL security (only TLS, the old standards supported for compatability)
    #ssl_protocols                   TLSv1 TLSv1.1 TLSv1.2; #SSL v3 is dropped (poodle vlunerability)
    #Shared SSL cache between all worker processes 15MB in size, 1 MB supports 4000 sessions
    #ssl_session_cache shared:SSL:15m;
    #The time for which clients may reuse SSL connection parameters
    #ssl_session_timeout 10m;
    

    #Root web directory
    #root /srv/www;
    
    #Request proxying settings to pass through
    #proxy_set_header Host $host;
    #proxy_set_header X-Real-IP $remote_addr;
    #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #proxy_set_header X-Forwarded-Proto $scheme;
    #proxy_set_header X-Frame-Options DENY;
    #proxy_set_header Strict-Transport-Security max-age=63072000;

    #Location of base URL is expressJS application
    #location / {
    #    try_files $uri @blazor;  
    #}

    #Definition of expressJS application as proxy passthrough to expressJS docker container
    #location @blazor {
    #    proxy_pass http://localhost:5000;
    #}
#}